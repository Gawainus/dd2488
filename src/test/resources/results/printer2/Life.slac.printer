class Matrix {
	var elements : Int[];
	var cols : Int;
	method init(n : Int, m : Int) : Matrix = {
		cols = m;
		elements = new Int[(n * m)];
		this
	}

	method unfold(i : Int, j : Int) : Int = {
		((cols * (i - 1)) + (j - 1))
	}

	method index(i : Int, j : Int) : Int = {
		elements [this.unfold(i, j)] 
	}

	method assign(i : Int, j : Int, x : Int) : Int = {
		elements[this.unfold(i, j)] = x;
		x
	}

}

class Board {
	var cells : Matrix;
	var rows : Int;
	var cols : Int;
	method init(n : Int, m : Int) : Board = {
	var i : Int;
	var j : Int;
	var bitbucket : Int;
		cells = new Matrix().init(n, m);
		rows = n;
		cols = m;
		i = 1;
		j = 1;
		while ((i < rows || i == rows))			{
				while ((j < cols || j == cols))					{
						bitbucket = this.kill(i, j);
						j = (j + 1)
					}

;
				i = (i + 1);
				j = 1
			}

;
		this
	}

	method alive(i : Int, j : Int) : Bool = {
		cells.index(i, j) == 1
	}

	method modulo(left : Int, right : Int) : Int = {
	var m : Int;
		m = (left - (right * (left / right)));
		if (m == 0)
			m = right
;
		m
	}

	method vmodulo(n : Int) : Int = {
		this.modulo(n, rows)
	}

	method hmodulo(n : Int) : Int = {
		this.modulo(n, cols)
	}

	method n_neighbour(i : Int, j : Int) : Int = {
		cells.index(this.vmodulo((i - 1)), this.hmodulo(j))
	}

	method ne_neighbour(i : Int, j : Int) : Int = {
		cells.index(this.vmodulo((i - 1)), this.hmodulo((j + 1)))
	}

	method nw_neighbour(i : Int, j : Int) : Int = {
		cells.index(this.vmodulo((i - 1)), this.hmodulo((j - 1)))
	}

	method e_neighbour(i : Int, j : Int) : Int = {
		cells.index(this.vmodulo(i), this.hmodulo((j - 1)))
	}

	method w_neighbour(i : Int, j : Int) : Int = {
		cells.index(this.vmodulo(i), this.hmodulo((j + 1)))
	}

	method s_neighbour(i : Int, j : Int) : Int = {
		cells.index(this.vmodulo((i + 1)), this.hmodulo(j))
	}

	method se_neighbour(i : Int, j : Int) : Int = {
		cells.index(this.vmodulo((i + 1)), this.hmodulo((j + 1)))
	}

	method sw_neighbour(i : Int, j : Int) : Int = {
		cells.index(this.vmodulo((i + 1)), this.hmodulo((j - 1)))
	}

	method neighbours(i : Int, j : Int) : Int = {
		(((((((this.nw_neighbour(i, j) + this.n_neighbour(i, j)) + this.ne_neighbour(i, j)) + this.e_neighbour(i, j)) + this.w_neighbour(i, j)) + this.sw_neighbour(i, j)) + this.s_neighbour(i, j)) + this.se_neighbour(i, j))
	}

	method kill(i : Int, j : Int) : Int = {
		cells.assign(i, j, 0)
	}

	method birth(i : Int, j : Int) : Int = {
		cells.assign(i, j, 1)
	}

}

class Game {
	var board : Board;
	var rows : Int;
	var cols : Int;
	method init() : Game = {
	var bitbucket : Int;
		rows = 22;
		cols = 80;
		board = new Board().init(rows, cols);
		bitbucket = board.birth(1, 2);
		bitbucket = board.birth(2, 3);
		bitbucket = board.birth(3, 1);
		bitbucket = board.birth(3, 2);
		bitbucket = board.birth(3, 3);
		this
	}

	method iterate() : Int = {
	var next : Board;
	var i : Int;
	var j : Int;
	var n : Int;
	var bitbucket : Int;
		next = new Board().init(rows, cols);
		i = 1;
		j = 1;
		while ((i < rows || i == rows))			{
				while ((j < cols || j == cols))					{
						n = board.neighbours(i, j);
						if (board.alive(i, j))
							{
								if (((n - 2) < 0 || (3 - n) < 0))
									bitbucket = next.kill(i, j)
								else 
 									bitbucket = next.birth(i, j)
							}

						else 
 							{
								if (n == 3)
									{
										bitbucket = next.birth(i, j)
									}

								else 
 									bitbucket = next.kill(i, j)
							}
;
						j = (j + 1)
					}

;
				i = (i + 1);
				j = 1
			}

;
		board = next;
		(rows * cols)
	}

	method print() : String = {
	var i : Int;
	var j : Int;
	var m : String;
		m = "";
		i = 1;
		j = 1;
		while ((i < rows || i == rows))			{
				while ((j < cols || j == cols))					{
						if (board.alive(i, j))
							m = (m + "o")
						else 
 							m = (m + ".");
						j = (j + 1)
					}

;
				println(m);
				i = (i + 1);
				m = "";
				j = 1
			}

;
		m
	}

	method wait() : Int = {
	var i : Int;
	var bitbucket1 : Game;
	var bitbucket2 : Int;
		bitbucket1 = new Game().init();
		i = 0;
		while (i < 1000)			{
				bitbucket2 = bitbucket1.iterate();
				i = (i + 1)
			}

;
		i
	}

	method run(n : Int) : String = {
	var i : Int;
	var bitbucket : Int;
		i = 0;
		while (i < n)			{
				println(this.print());
				bitbucket = this.wait();
				bitbucket = this.iterate();
				i = (i + 1)
			}

;
		""
	}

}

method main() : Unit = {
	println(new Game().init().run(10))
}

